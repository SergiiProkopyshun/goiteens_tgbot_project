import datetime
import aiohttp
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import Message
from aiogram.dispatcher.filters import Text

from tgbot.keyboards.inline import kbd, kbd2
from tgbot.misc.get_time import get_time_of_day
from tgbot.misc.states import SimpleStatsGroup


async def start_command(event: types.Message | types.CallbackQuery, state: FSMContext):
    if type(event) == types.CallbackQuery:
        await event.answer()
        message = event.message
    else:
        message = event
    time_of_day = get_time_of_day()
    await message.answer(
        f"<b>‚úãüèª {time_of_day}! –Ø, —Ä–∞–¥–∏–π –Ω–∞–¥–∞—Ç–∏ –í–∞–º —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–≥–æ–¥—É –≤ –±—É–¥—å-—è–∫–æ–º—É –∫—É—Ç–æ—á–∫—É —Å–≤—ñ—Ç—É. –î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–ø–∏—Å–∞—Ç–∏ –º—ñ—Å—Ç–æ, —è–∫–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å, —ñ —è –Ω–∞–¥–∞–º –≤–∞–º –¥–∞–Ω—ñ –ø—Ä–æ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏.</b>\n\n<i>–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É: –¥–µ—è–∫—ñ –º—ñ—Å—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–∏—Å–∞—Ç–∏ –ª–∏—à–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é.</i>",
        reply_markup=kbd2)
    await state.finish()

async def get_weather(message: types.Message, state: FSMContext):
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–•–º–∞—Ä–Ω–æ \U00002601",
        "Rain": "–î–æ—â \U00002614",
        "Drizzle": "–î–æ—â \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω—ñ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }
    config = message.bot['config']
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f'http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={config.weather.token}&units=metric') as response:
                data = await response.json()

        city = data["name"]
        region = data["sys"]["country"]
        cur_weather = data["main"]["temp"]

        weather_description = data["weather"][0]["main"]
        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = "–ü–æ–¥–∏–≤—ñ—Ç—å—Å—è —É –≤—ñ–∫–Ω–æ, –Ω–µ —Ä–æ–∑—É–º—ñ—é, —â–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞!"

        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
        length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(
            data["sys"]["sunrise"])

        async with aiohttp.ClientSession() as session:
            async with session.get(
                    f'http://api.openweathermap.org/data/2.5/forecast?q={message.text}&appid={config.weather.token}&units=metric') as response:
                forecast_data = await response.json()

        forecast_message = "\n<i>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ 6 –¥–Ω—ñ–≤:</i>\n"
        current_date = None
        for forecast in forecast_data["list"]:
            forecast_date = datetime.datetime.fromtimestamp(forecast["dt"]).date()
            if current_date is None or current_date != forecast_date:
                forecast_message += f"\n<b>{forecast_date.strftime('%Y-%m-%d %A')}</b>\n\n"
                current_date = forecast_date

            forecast_time = datetime.datetime.fromtimestamp(forecast["dt"]).time()
            forecast_temp = forecast["main"]["temp"]
            forecast_weather_description = forecast["weather"][0]["main"]
            if forecast_weather_description in code_to_smile:
                forecast_wd = code_to_smile[forecast_weather_description]
            else:
                forecast_wd = "–ü–æ–¥–∏–≤—ñ—Ç—å—Å—è —É –≤—ñ–∫–Ω–æ, –Ω–µ —Ä–æ–∑—É–º—ñ—é, —â–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞!"

            forecast_message += f"<i>{forecast_time.strftime('%H:%M')}</i> | {forecast_temp}¬∞C | {forecast_wd}\n\n"

        await message.reply(
            f"<b>üìÉ –ü–æ–≥–æ–¥–∞ —É –≤–∏–±—Ä–∞–Ω–æ–º—É —Ä–µ–≥—ñ–æ–Ω—ñ:</b>\n____________________________\n\n"
            f"<i>–î–∞—Ç–∞ —Ç–∞ —á–∞—Å: </i>{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}\n"
            f"<i>–ü–æ–≥–æ–¥–∞ —É –º—ñ—Å—Ç—ñ: </i>{city}, {region}\n<i>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: </i>{cur_weather}¬∞C | {wd}\n____________________________\n\n"
            f"<i>–í–æ–ª–æ–≥—ñ—Å—Ç—å: </i>{humidity}%\n<i>–¢–∏—Å–∫: </i>{pressure} –º–º.—Ä—Ç.—Å—Ç.\n<i>–í—ñ—Ç–µ—Ä: </i>{wind} –º/—Å\n____________________________\n\n"
            f"<i>–°—Ö—ñ–¥ —Å–æ–Ω—Ü—è: </i>{sunrise_timestamp.strftime('%H:%M')}\n<i>–ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è: </i>{sunset_timestamp.strftime('%H:%M')}\n<i>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –¥–Ω—è: </i>{length_of_the_day}\n____________________________\n"
            f"{forecast_message}", reply_markup=kbd)
        await state.finish()
    except:
        await message.reply("<b>üü° –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç–∞.</b>\n\n<i>–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É: –¥–µ—è–∫—ñ –º—ñ—Å—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–∏—Å–∞—Ç–∏ –ª–∏—à–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é.</i>")

async def city(call: types.CallbackQuery):
    await call.message.answer("<b>üå§ –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø–æ–≥–æ–¥—É.</b>")
    await SimpleStatsGroup.state1.set()

async def press_button(message: types.Message):
    await message.answer("<b>‚ÑπÔ∏è –©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º, —ñ –ø—ñ—Å–ª—è —á–æ–≥–æ –≤–≤–µ—Å—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–µ –í–∞–º –º—ñ—Å—Ç–æ.</b>", reply_markup=kbd2)



def register_user(dp: Dispatcher):
    dp.register_callback_query_handler(city, text="weather_check", state="*")
    dp.register_callback_query_handler(start_command, text="menu", state="*")
    dp.register_message_handler(start_command, commands=["start"], state="*")
    dp.register_message_handler(get_weather, state=SimpleStatsGroup.state1)
    dp.register_message_handler(press_button)